import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.*;

public class Slotmachine extends MouseAdapter{
public static JLabel credits = new JLabel(Storage.parts(2));
        public static void main() {
            JPanel panel = new JPanel(null);



            JFrame frame = new JFrame("SlotMachine");
            frame.setVisible(true);
            frame.setSize(550,300);
            frame.setLocation(600,250);
            frame.add(panel);

            JLabel one = new JLabel(String.valueOf(0));
            one.setSize(100, 100);
            one.setLocation(40, 50);
            one.setFont((new Font("Arial", Font.PLAIN, 30)));
            one.setVisible(true);
            panel.add(one);

            JLabel two = new JLabel(String.valueOf(0));
            two.setSize(100, 100);
            two.setLocation(100, 50);
            two.setFont((new Font("Arial", Font.PLAIN, 30)));
            two.setVisible(true);
            panel.add(two);

            JLabel three = new JLabel(String.valueOf(0));
            three.setSize(100, 100);
            three.setLocation(160, 50);
            three.setFont((new Font("Arial", Font.PLAIN, 30)));
            three.setVisible(true);
            panel.add(three);


            JTextField Bet = new JTextField(String.valueOf(1));
            Bet.setVisible(true);
            Bet.setSize(50,20);
            Bet.setLocation(370,230);
            panel.add(Bet);

            JCheckBox box = new JCheckBox("Always win");
            box.setVisible(true);
            box.setSize(90,45);
            box.setLocation(350,-5);
            panel.add(box);


            credits.setVisible(true);
            credits.setSize(90,90);
            credits.setLocation(350, 150);
            credits.setFont((new Font("Clarendon Bold", Font.BOLD, 50)));
            panel.add(credits);



            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            JButton Spin = new JButton("Play");
            Spin.setSize(180,90);
            Spin.setLocation(300,50);
            Spin.setVisible(true);
            panel.add(Spin);
            Spin.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    int x = (int) Math.round(Math.random()*10);
                    int y = (int) Math.round(Math.random()*10);
                    int z = (int) Math.round(Math.random()*10);

                    if(Integer.parseInt(Bet.getText()) > Integer.parseInt(credits.getText())&& !box.isSelected()){
                        return;
                    }

                    if(e.getButton() == MouseEvent.BUTTON1){
                        one.setText((String.valueOf(x)));
                        two.setText(String.valueOf(y));
                        three.setText(String.valueOf(z));
                        //Always win
                        if(box.isSelected()){
                            two.setText(one.getText());
                        }
                        credits.setText(String.valueOf(Integer.parseInt(credits.getText()) - Integer.parseInt(Bet.getText())));
                        if (one.getText().equals(two.getText())&& !one.getText().equals(three.getText())) {
                            credits.setText(String.valueOf(Integer.parseInt(credits.getText()) + 2*(Integer.parseInt(Bet.getText()))));
                            try {
                                AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("C:\\Users\\bener\\Downloads\\mixkit-coins-handling-1939.wav").getAbsoluteFile());
                                Clip clip = AudioSystem.getClip( );
                                clip.open(audioInputStream);
                                clip.start( );
                            } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
                                throw new RuntimeException(ex);
                            }
                        } else {
                            try {
                                AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("C:\\Users\\bener\\Downloads\\vibrating-thud-39536.wav").getAbsoluteFile());
                                Clip clip = AudioSystem.getClip();
                                clip.open(audioInputStream);
                                clip.start();
                            } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
                                throw new RuntimeException(ex);
                            }
                        }
                        if(Integer.parseInt(credits.getText()) < 0) {
                            credits.setText(String.valueOf(1));
                        }

                        // update the credits value in the file
                        String creditsValue = credits.getText();
                        if (!Slotmachine.credits.getText().equals(Storage.parts(1))) {
                            try {
                                File file = new File("users.txt");
                                FileReader reader = new FileReader(file);
                                BufferedReader bufferedReader = new BufferedReader(reader);

                                String line;
                                StringBuilder updatedContent = new StringBuilder();
                                while ((line = bufferedReader.readLine()) != null) {
                                    String[] parts = line.split(":");
                                    if (parts[0].equals(Main.uname.getText())) {
                                        parts[2] = creditsValue;
                                        line = String.join(":", parts);
                                    }
                                    updatedContent.append(line).append("\n");
                                }

                                bufferedReader.close();
                                reader.close();

                                FileWriter writer = new FileWriter(file);
                                writer.write(updatedContent.toString());
                                writer.close();

                                // update the credits label in the GUI with the new value
                                Storage.updateCredits(creditsValue);
                            } catch (IOException ex) {
                                throw new RuntimeException(ex);
                            }
                        }
                    }
                }


                @Override
                public void mousePressed(MouseEvent e) {}
                @Override
                public void mouseReleased(MouseEvent e) {}
                @Override
                public void mouseEntered(MouseEvent e) {}
                @Override
                public void mouseExited(MouseEvent e) {}

            });









        }

    }

